// Generated by view binder compiler. Do not edit!
package kz.homebank.base.presentation.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewStub;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import kz.homebank.base.presentation.R;

public final class PresentationBottomFragmentBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView btnClose;

  @NonNull
  public final ImageView handle;

  @NonNull
  public final View line;

  @NonNull
  public final ViewStub stub;

  @NonNull
  public final TextView tvHeader;

  private PresentationBottomFragmentBinding(@NonNull LinearLayout rootView,
      @NonNull ImageView btnClose, @NonNull ImageView handle, @NonNull View line,
      @NonNull ViewStub stub, @NonNull TextView tvHeader) {
    this.rootView = rootView;
    this.btnClose = btnClose;
    this.handle = handle;
    this.line = line;
    this.stub = stub;
    this.tvHeader = tvHeader;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PresentationBottomFragmentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PresentationBottomFragmentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.presentation_bottom_fragment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PresentationBottomFragmentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnClose;
      ImageView btnClose = ViewBindings.findChildViewById(rootView, id);
      if (btnClose == null) {
        break missingId;
      }

      id = R.id.handle;
      ImageView handle = ViewBindings.findChildViewById(rootView, id);
      if (handle == null) {
        break missingId;
      }

      id = R.id.line;
      View line = ViewBindings.findChildViewById(rootView, id);
      if (line == null) {
        break missingId;
      }

      id = R.id.stub;
      ViewStub stub = ViewBindings.findChildViewById(rootView, id);
      if (stub == null) {
        break missingId;
      }

      id = R.id.tvHeader;
      TextView tvHeader = ViewBindings.findChildViewById(rootView, id);
      if (tvHeader == null) {
        break missingId;
      }

      return new PresentationBottomFragmentBinding((LinearLayout) rootView, btnClose, handle, line,
          stub, tvHeader);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
